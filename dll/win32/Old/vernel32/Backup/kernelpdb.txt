struct _APPX_PROCESS_CONTEXT // 0x38
{
    struct _SECURITY_CAPABILITIES SecurityCapabilities; // +0x0(0x18)
    WORD* DllDirectories; // +0x18(0x8)
    void* DependencyDataSection; // +0x20(0x8)
    void* DependencyDataMappedView; // +0x28(0x8)
    void* DependencyDataBaseInChildProcess; // +0x30(0x8)
};
struct _APPX_PROCESS_CONTEXT // 0x38
{
    struct _SECURITY_CAPABILITIES SecurityCapabilities; // +0x0(0x18)
    WORD* DllDirectories; // +0x18(0x8)
    void* DependencyDataSection; // +0x20(0x8)
    void* DependencyDataMappedView; // +0x28(0x8)
    void* DependencyDataBaseInChildProcess; // +0x30(0x8)
};
class AppXMiniRepository // 0x18
{
public:
    ~AppXMiniRepository(void);
    WCHAR* AppXMiniRepository::GetRepositoryRootRegistryPath(void) = 0;
    HRESULT AppXMiniRepository::Open(void*, bool, class AppXMiniRepository**) = 0;
    HRESULT AppXMiniRepository::AddPackage(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, void*, struct _SID_AND_ATTRIBUTES*, ULONG, class AppXApplicationData*, ULONG);
    HRESULT AppXMiniRepository::RemovePackage(struct Common::COMMON_STRING*);
    HRESULT AddApplicationActivatableClassId(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*);
    HRESULT RemoveApplicationActivatableClassId(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*);
    HRESULT AppXMiniRepository::GetPackageInformationForCreateProcess(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, void**, struct _SID_AND_ATTRIBUTES**, ULONG*);
    void Close(void);
    void* __vecDelDtor(DWORD);
private:
    void AppXMiniRepository(class Common::RegistryKey*, void*, int);
    void AppXMiniRepository(void);
    HRESULT AppXMiniRepository::UpdateRegistryKeyAcls(void*, void*, class Common::RegistryKey*) = 0;
    HRESULT AppXMiniRepository::CreatePackageKeySecurityDescriptor(void*, void*, ULONG*, void**) = 0;
    HRESULT ValidatePerApplicationData(class AppXApplicationData*, ULONG) = 0;
    HRESULT AppXMiniRepository::CreatePerApplicationData(class Common::RegistryKey*, class AppXApplicationData*, ULONG) = 0;
    HRESULT AppXMiniRepository::IsRepositoryRegistryKeyOwnedBySystem(struct HKEY__*) = 0;
    HRESULT AppXMiniRepository::OpenPackageKey(struct Common::COMMON_STRING*, class Common::RegistryKey**);
    HRESULT AppXMiniRepository::SerializeCapabilitiesAndAttributes(class Common::RegistryKey*, struct _SID_AND_ATTRIBUTES*, ULONG);
    HRESULT AppXMiniRepository::DeserializeCapabilitiesAndAttributes(class Common::RegistryKey*, struct _SID_AND_ATTRIBUTES**, ULONG*);
public:
    WCHAR* AppXMiniRepositoryRegistryPath; // +0x0(0x8)
    WCHAR* PackageRootFolderValueName; // +0x0(0x8)
    WCHAR* PackageSidValueName; // +0x0(0x8)
    WCHAR* ApplicationsRootValueName; // +0x0(0x8)
    WCHAR* ActivatableClassesRootValueName; // +0x0(0x8)
    WCHAR* NavigationDomainValueName; // +0x0(0x8)
    WCHAR* ErrorPageValueName; // +0x0(0x8)
    WCHAR* DisplayNameValueName; // +0x0(0x8)
    WCHAR* DefaultStartPageValueName; // +0x0(0x8)
    WCHAR* PackageIDValueName; // +0x0(0x8)
    WCHAR* CapabilitySidsValueName; // +0x0(0x8)
    WCHAR* CapabilityCountValueName; // +0x0(0x8)
    ULONG MaximumCapabilityCount; // +0x0(0x4)
private:
    class Common::RegistryKey* repositoryKey; // +0x0(0x8)
    void* userSid; // +0x8(0x8)
    int openedForWrite; // +0x10(0x4)
};
struct IDCompositionDevice : public IUnknown // 0x8
{
    virtual HRESULT Commit(void) = 0;
    virtual HRESULT CreateHwndTarget(struct HWND__*, int, struct IDCompositionTarget**) = 0;
    virtual HRESULT CreateVisual(struct IDCompositionVisual**) = 0;
    virtual HRESULT CreateTranslateTransform(struct IDCompositionTranslateTransform**) = 0;
    virtual HRESULT CreateScaleTransform(struct IDCompositionScaleTransform**) = 0;
    virtual HRESULT CreateRotateTransform(struct IDCompositionRotateTransform**) = 0;
    virtual HRESULT CreateSkewTransform(struct IDCompositionSkewTransform**) = 0;
    virtual HRESULT CreateMatrixTransform(struct IDCompositionMatrixTransform**) = 0;
    virtual HRESULT CreateTransformGroup(struct IDCompositionTransform**, DWORD, struct IDCompositionTransform**) = 0;
    virtual HRESULT CreateTranslateTransform3D(struct IDCompositionTranslateTransform3D**) = 0;
    virtual HRESULT CreateScaleTransform3D(struct IDCompositionScaleTransform3D**) = 0;
    virtual HRESULT CreateRotateTransform3D(struct IDCompositionRotateTransform3D**) = 0;
    virtual HRESULT CreateMatrixTransform3D(struct IDCompositionMatrixTransform3D**) = 0;
    virtual HRESULT CreateTransform3DGroup(struct IDCompositionTransform3D**, DWORD, struct IDCompositionTransform3D**) = 0;
    virtual HRESULT CreateEffectGroup(struct IDCompositionEffectGroup**) = 0;
    virtual HRESULT CreateRectangleClip(struct IDCompositionRectangleClip**) = 0;
    virtual HRESULT CreateAnimation(struct IDCompositionAnimation**) = 0;
    void IDCompositionDevice(struct IDCompositionDevice&);
    void IDCompositionDevice(void);
    struct IDCompositionDevice& operator=(struct IDCompositionDevice&);
};
struct IDCompositionVisual : public IUnknown // 0x8
{
    virtual HRESULT SetOffsetX(struct IDCompositionAnimation*) = 0;
    virtual HRESULT SetOffsetX(float) = 0;
    virtual HRESULT SetOffsetY(struct IDCompositionAnimation*) = 0;
    virtual HRESULT SetOffsetY(float) = 0;
    virtual HRESULT SetTransform(struct IDCompositionTransform*) = 0;
    virtual HRESULT SetTransform(struct D2D_MATRIX_3X2_F&) = 0;
    virtual HRESULT SetEffect(struct IDCompositionEffect*) = 0;
    virtual HRESULT SetClip(struct IDCompositionClip*) = 0;
    virtual HRESULT SetClip(struct D2D_RECT_F&) = 0;
    virtual HRESULT SetContent(struct HWND__*, struct tagRECT*) = 0;
    virtual HRESULT SetContent(struct HBITMAP__*, struct tagRECT*) = 0;
    virtual HRESULT SetContent(struct IDXGISwapChain1*, struct tagRECT*) = 0;
    virtual HRESULT AddVisual(struct IDCompositionVisual*, int, struct IDCompositionVisual*) = 0;
    virtual HRESULT RemoveVisual(struct IDCompositionVisual*) = 0;
    virtual HRESULT RemoveAllVisuals(void) = 0;
    void IDCompositionVisual(struct IDCompositionVisual&);
    void IDCompositionVisual(void);
    struct IDCompositionVisual& operator=(struct IDCompositionVisual&);
};
struct IInspectable : public IUnknown // 0x8
{
    virtual HRESULT GetIids(ULONG*, struct _GUID**) = 0;
    virtual HRESULT GetRuntimeClassName(struct HSTRING__**) = 0;
    virtual HRESULT GetTrustLevel(enum TrustLevel*) = 0;
    void IInspectable(struct IInspectable&);
    void IInspectable(void);
    struct IInspectable& operator=(struct IInspectable&);
};
class PackageMoniker // 0x30
{
public:
    void PackageMoniker(void);
    ~PackageMoniker(void);
    HRESULT Init(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, struct Common::COMMON_STRING*);
    HRESULT Init(struct Common::COMMON_STRING*, struct Common::COMMON_STRING*, union Common::PackageVersion*, WORD, struct Common::COMMON_STRING*);
    HRESULT Init(struct Common::COMMON_STRING*);
    bool operator==(class PackageMoniker&);
    bool operator!=(class PackageMoniker&);
    struct Common::COMMON_STRING* GetMonikerString(void);
    struct Common::COMMON_STRING* GetFamilyMonikerString(void);
    HRESULT MonikerStringToFamilyMonikerString(struct Common::COMMON_STRING*, class Common::StringBuffer*) = 0;
    void* __vecDelDtor(DWORD);
public:
    ULONG MaxLengthPublisher; // +0x0(0x4)
    ULONG MaxLengthPublisherHash; // +0x0(0x4)
    ULONG MaxLengthName; // +0x0(0x4)
    ULONG MaxLengthVersion; // +0x0(0x4)
    ULONG MaxLengthArchitecture; // +0x0(0x4)
    ULONG MaxLengthLanguage; // +0x0(0x4)
    ULONG TruncatedDigestByteLength; // +0x0(0x4)
private:
    class Common::StringBuffer monikerBuffer; // +0x0(0x18)
    class Common::StringBuffer familyMonikerBuffer; // +0x18(0x18)
};
class StateSpace // 0x50
{
public:
    void* operator new(ULONGLONG) = 0;
    void operator delete(void*) = 0;
    long StateSpace::Create(void*, WCHAR*, class StateSpace**) = 0;
    long StateSpace::Create(class StateSpace**) = 0;
    void StateSpace::~StateSpace(void);
    long StateSpace::GetStateVersion(DWORD*);
    long SetStateVersion(DWORD);
    long StateSpace::GetStateFolder(enum tag_STATE_PERSIST_ATTRIB, WCHAR*, DWORD*);
    long StateSpace::ResetState(void);
    long StateSpace::GetSystemAppDataFolder(WCHAR*, DWORD*);
    long StateSpace::GetSystemAppDataKey(struct HKEY__**, WCHAR*, DWORD*);
    long StateSpace::GetHivePath(enum tag_STATE_PERSIST_ATTRIB, WCHAR*, DWORD*);
    long StateSpace::GetHive(enum tag_STATE_PERSIST_ATTRIB, struct HKEY__**);
    long StateSpace::OpenRoamingMutexes(int, void**, void**);
    long StateSpace::OpenRoamingNotificationEvent(int, void**);
    void* __vecDelDtor(DWORD);
private:
    void StateSpace(class StateSpace&);
    void StateSpace(void);
    class StateSpace& operator=(class StateSpace&);
    long StateSpace::GetNamedObjectPath(WCHAR*, DWORD, WCHAR**);
    long StateSpace::GetSecurityDescriptor(void**);
    struct StateSpace::UnstructuredStateBucketNamespace* GetUnstructuredStateBucketNamespace(enum tag_STATE_PERSIST_ATTRIB) = 0;
    struct StateSpace::StructuredBucketHiveName* GetStructuredBucketHiveName(enum tag_STATE_PERSIST_ATTRIB) = 0;
    long StateSpace::GetStructuredSystemAppDataPath(struct HKEY__**, struct StateSpace::BucketRootPath**);
    long StateSpace::GetUnstructuredSystemAppDataPath(struct StateSpace::BucketRootPath**);
    long StateSpace::LoadHive(enum tag_STATE_PERSIST_ATTRIB, struct HKEY__**);
    long ResetStructuredStateLocality(enum tag_STATE_PERSIST_ATTRIB);
private:
    WCHAR* userSid; // +0x0(0x8)
    WCHAR* packageFamilyMoniker; // +0x8(0x8)
    DWORD packageFamilyMonikerCch; // +0x10(0x4)
    struct StateSpace::BucketRootPath structuredSystemAppDataRootPath; // +0x18(0x10)
    struct StateSpace::BucketRootPath unstructuredSystemAppDataRootPath; // +0x28(0x10)
    struct HKEY__* localKey; // +0x38(0x8)
    struct HKEY__* roamingKey; // +0x40(0x8)
    struct _RTL_SRWLOCK hiveLock; // +0x48(0x8)
    struct StateSpace::UnstructuredStateBucketNamespace unstructuredStateBucketNamespaces[0x0]; // +0x0(0x0)
    struct StateSpace::StructuredBucketHiveName structuredBucketHiveNames[0x0]; // +0x0(0x0)
    WCHAR* versionValueName; // +0x0(0x8)
};
struct StateSpace::StructuredBucketDescriptor // 0x18
{
    enum tag_STATE_PERSIST_ATTRIB persistAttrib; // +0x0(0x4)
    struct HKEY__* rootKey; // +0x8(0x8)
    WCHAR* subkeyPath; // +0x10(0x8)
};
enum WINRT_INIT_TYPE
{ 
    WINRT_INIT_APARTMENTTHREADED = 0x0;
    WINRT_INIT_MULTITHREADED = 0x1;
};